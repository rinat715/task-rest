// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"github.com/bmizerany/pat"
	"github.com/go-playground/validator/v10"
	"go_rest/internal/config"
	"go_rest/internal/repositories/tasks"
	"go_rest/internal/repositories/users"
	"go_rest/internal/rest"
	"go_rest/internal/services/hash_generator"
	"go_rest/internal/services/migrations"
	tasks2 "go_rest/internal/services/tasks"
	users2 "go_rest/internal/services/users"
	"go_rest/internal/sqlitedb"
	"net/http"
)

// Injectors from di.go:

func initializeServer(ctx context.Context) (*http.Server, error) {
	validate := validator.New()
	configConfig := config.NewConfig()
	db, err := sqlitedb.NewConnDB(ctx, configConfig)
	if err != nil {
		return nil, err
	}
	userRepository := users.NewUserRepository(db)
	hashGenerator := hashgenerator.NewHashGenerator(configConfig)
	userService := users2.NewUserService(userRepository, hashGenerator)
	taskRepository := tasks.NewTaskRepository(db)
	taskService := tasks2.NewTaskService(taskRepository)
	patternServeMux := pat.New()
	taskServer := rest.NewTaskServer(validate, userService, taskService, patternServeMux, configConfig)
	server := rest.NewHttpServer(taskServer)
	return server, nil
}

func initializeMigrationService(ctx context.Context) (*migrations.MigrationService, error) {
	configConfig := config.NewConfig()
	db, err := sqlitedb.NewConnDB(ctx, configConfig)
	if err != nil {
		return nil, err
	}
	migrationService := migrations.NewMigrationService(db)
	return migrationService, nil
}
